/*
 * Project.c
 *
 *  Created on: May 5, 2023
 *      Author: Hossam Ragab
 */

#include <stdio.h>
#include "Project.h"

#define TRUE	1
#define ENGINE_TEMP_CONTROLLER		1

int main(void){

	enum State AC = Off;
	enum State EngineTemperatureController = Off;
	enum State EngineState = Off;

	char SystemState; /*SystemState means Engine may be On or Off or Quit*/
	char SystemON;	 /*SystemON means Engine may be Off or Set Traffic or Set Room Temperature Sensor or Engine Temperature Sensor*/

	int VehicleSpeed = 30;
	int RoomTemperature = 35;
	int EngineTemperature = 145;

	SystemEngineState(&SystemState);

	while(TRUE)
	{
		switch(SystemState)
		{
		case 'a':
			SystemEngineStateON(&SystemON, &SystemState, &EngineState, &VehicleSpeed, &RoomTemperature, &AC, &EngineTemperature, &EngineTemperatureController);
			break;

		case 'b':
			printf("Turn OFF Engine\n\n");
			SystemEngineState(&SystemState);
			break;

		case 'c':
			printf("Quit Program\nIf you want to return to program run again\n");
			return 0;
		}
	}

}

/* Description :
 * function responsible for determining the state of system according to SystemState
 */
void SystemEngineState(char *SystemState)
{
	do{
		printf("a. Turn on the vehicle engine\n");
		printf("b. Turn off the vehicle engine\n");
		printf("c. Quit the system\n\n");
		fflush(stdout);
		scanf(" %c",SystemState);

		/*SystemState from user true make condition in while false to return to switch to check cases
		 *SystemState from user false make condition in while true that return to make loop again */
	}while(!((*SystemState == 'a') || (*SystemState == 'b') || (*SystemState == 'c')));
}


/* Description :
 * function responsible for determining flow of System Engine when System State ON according to SystemState
 */
void SystemEngineStateON(char *SystemON, char *SystemState, enum State *EngineState, int *VehicleSpeed, int *RoomTemperature,enum State *AC, int *EngineTemperature, enum State *EngineTemperatureController)
{
	do{
		printf("a. Turn off the engine\n");
		printf("b. Set the traffic light color\n");
		printf("c. Set the room temperature (Temperature Sensor)\n");

#if ENGINE_TEMP_CONTROLLER == 1

		printf("d. Set the engine temperature (Engine Temperature Sensor)\n\n");

#endif
		fflush(stdout);
		scanf(" %c",SystemON);

	}while(!((*SystemON == 'a') || (*SystemON == 'b') || (*SystemON == 'c') || (*SystemON == 'd')));



	switch(*SystemON)
	{
	case 'a':
		SystemEngineState(SystemState);
		break;

	case 'b':
		SetTrafficLightColor(VehicleSpeed);
		break;

	case 'c':
		SetRoomTemperatureSensor(RoomTemperature, AC);
		break;

	case 'd':
		SetEngineTemperatureSensor(EngineTemperature, EngineTemperatureController);
		break;
	}
	if(!(*SystemON == 'a'))
	{
		*EngineState = On;
		DisplayCurrentVehicleState(EngineState, VehicleSpeed, RoomTemperature, AC, EngineTemperature, EngineTemperatureController);
	}
}



/* Description :
 * function responsible for editing Vehicle Speed when Traffic Light Color change
 */
void SetTrafficLightColor(int *VehicleSpeed)
{
	char LightColor;

	/* loop to prevent user to enter Light Color not find in System */
	do{
		printf("\nPlease Enter Required Color:\n'R & r' for Red\n'G & g' for Green\n'O & o' for Orange\n\n");
		fflush(stdout);
		scanf(" %c",&LightColor);

	}while(!((LightColor == 'G') || (LightColor == 'g') || (LightColor == 'O') || (LightColor == 'o') || (LightColor == 'R') || (LightColor == 'r')));

	switch(LightColor)
	{
	case 'G':
	case 'g':
		*VehicleSpeed = 100;
		break;

	case 'O':
	case 'o':
		*VehicleSpeed = 30;
		break;

	case 'R':
	case 'r':
		*VehicleSpeed = 0;
		break;
	}

}

/* Description :
 * function responsible for editing Room Temperature and State AC according to Room Temperature
 */

void SetRoomTemperatureSensor(int *RoomTemperature, enum State *AC)
{
	/* loop to prevent user to enter negative value of Room Temperature */
	do{
		printf("Please Enter Room Temperature:\n");
		fflush(stdout);
		scanf("%d",RoomTemperature);

	}while(*RoomTemperature < 0);

	if(*RoomTemperature < 10)
	{
		*RoomTemperature = 20;
		*AC = On;
	}
	else if(*RoomTemperature > 30)
	{
		*RoomTemperature = 20;
		*AC = On;
	}
	else
	{
		*AC = Off;
	}
}

/* Description :
 * function responsible for editing Engine Temperature and State Engine Temperature Controller according to Engine Temperature
 */
void SetEngineTemperatureSensor(int *EngineTemperature, enum State *EngineTemperatureController)
{
	do{
		printf("Please Enter Engine Temperature:\n");
		fflush(stdout);
		scanf("%d",EngineTemperature);

	}while(*EngineTemperature < 0);

	if(*EngineTemperature < 100)
	{
		*EngineTemperature = 125;
		*EngineTemperatureController = On;
	}
	else if(*EngineTemperature > 150)
	{
		*EngineTemperature = 125;
		*EngineTemperatureController = On;
	}
	else
	{
		*EngineTemperatureController = Off;
	}


}

/* Description :
 * function responsible for Display Current Vehicle State according to Engine State, Vehicle Speed, Room Temperature, AC State, Engine Temperature and Engine Temperature Controller State
 */

void DisplayCurrentVehicleState(enum State *EngineState, int *VehicleSpeed, int *RoomTemperature,enum State *AC, int *EngineTemperature, enum State *EngineTemperatureController)
{
	if(*EngineState == On)
	{
		printf("\nEngine State is ON\n");
	}
	else
	{
		printf("\nEngine State is OFF\n");
	}
	if(*VehicleSpeed == 30)
	{
		*AC = On;
		*EngineTemperatureController = On;
		*RoomTemperature = *RoomTemperature *(5/4) + 1;
		*EngineTemperature = *RoomTemperature *(5/4) + 1;
	}
	if(*AC == On)
	{
		printf("AC is ON\n");
	}
	else
	{
		printf("AC is OFF\n");
	}

	printf("Vehicle Speed = %d Km/Hr\n",*VehicleSpeed);
	printf("Room Temperature = %d C\n",*RoomTemperature);
	if(*EngineTemperatureController == On)
	{
		printf("EngineTemperatureController is ON\n");
	}
	else
	{
		printf("EngineTemperatureController is OFF\n");
	}
	printf("Engine Temperature = %d C\n\n",*EngineTemperature);


}






